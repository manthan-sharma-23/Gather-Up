// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventScope {
  GLOBAL
  COMMUNITY
  PERSONAL
}

enum CommunityRole {
  MODERATOR
  ADMIN
  MEMBER
}

enum EventRoles {
  HOST
  MANAGER
  PARTICIPANT
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
}

enum InviteStatus {
  PENDING
  REJECTED
  ACCEPTED
}

model User {
  id               String             @id @default(uuid())
  name             String?
  email            String             @unique
  hashedPassword   String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  communityUsers   CommunityUser[]
  ownedCommunities Community[]
  communityInvites CommunityInvite[]
  eventInvites     EventInvite[]
  EventParticipant EventParticipant[]
  EventLike        EventLike[]
  MergedCalendar   MergedCalendar?    @relation(fields: [mergedCalendarId], references: [id])
  mergedCalendarId Int?

  UserCalender   UserCalender? @relation(fields: [userCalenderId], references: [id])
  userCalenderId String?
}

model Community {
  id        String            @id @default(cuid())
  name      String
  hashtag   String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  users     CommunityUser[]
  invites   CommunityInvite[]
  User      User?             @relation(fields: [createdBy], references: [id])
  createdBy String?
  Event     Event[]

  CommunityCalender   CommunityCalender? @relation(fields: [communityCalenderId], references: [id])
  communityCalenderId String?
}

model CommunityUser {
  id   String        @id @default(uuid())
  role CommunityRole @default(MEMBER)

  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model Event {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?            @db.Text
  createdAt         DateTime           @default(now())
  startedAt         DateTime           @default(now())
  endAt             DateTime?
  scope             EventScope         @default(GLOBAL)
  location          String?
  status            EventStatus        @default(SCHEDULED)
  userId            String
  Community         Community?         @relation(fields: [communityId], references: [id])
  communityId       String?
  mainLink          String?
  participants      EventParticipant[]
  likes             EventLike[]
  eventComments     EventComment[]
  invites           EventInvite[]
  UserCalender      UserCalender?      @relation(fields: [userCalenderId], references: [id])
  userCalenderId    String?
  CommuniCalender   CommunityCalender? @relation(fields: [communiCalenderId], references: [id])
  communiCalenderId String?
}

model EventParticipant {
  id      Int        @id @default(autoincrement())
  role    EventRoles
  User    User?      @relation(fields: [userId], references: [id])
  userId  String?
  Event   Event?     @relation(fields: [eventId], references: [id])
  eventId Int?
}

model EventLike {
  id      String  @id @default(cuid())
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId Int?
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model EventComment {
  id        String   @id @default(cuid())
  comment   String
  parentId  String?
  createdAt DateTime @default(now())
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
}

model CommunityInvite {
  id          Int          @id @default(autoincrement())
  status      InviteStatus @default(PENDING)
  Community   Community?   @relation(fields: [communityId], references: [id])
  communityId String?
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model EventInvite {
  id      Int          @id @default(autoincrement())
  status  InviteStatus @default(PENDING)
  User    User?        @relation(fields: [userId], references: [id])
  userId  String?
  Event   Event?       @relation(fields: [eventId], references: [id])
  eventId Int?
}

model UserCalender {
  id     String @id @default(cuid())
  userId String

  events           Event[]
  MergedCalendar   MergedCalendar? @relation(fields: [mergedCalendarId], references: [id])
  mergedCalendarId Int?
  User             User[]
}

model CommunityCalender {
  id          String @id @default(cuid())
  communityId String

  events           Event[]
  MergedCalendar   MergedCalendar? @relation(fields: [mergedCalendarId], references: [id])
  mergedCalendarId Int?
  Community        Community[]
}

model MergedCalendar {
  id                 Int                 @id @default(autoincrement())
  userId             String
  User               User[]
  userCalenders      UserCalender[]
  communityCalenders CommunityCalender[]
}
