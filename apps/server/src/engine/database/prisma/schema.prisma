// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventScope {
  GLOBAL
  COMMUNITY
  PERSONAL
}

enum CommunityRole {
  MODERATOR
  ADMIN
  MEMBER
}

enum EventRoles {
  HOST
  PARTICIPANT
}

enum EventStatus {
  SCHEDULED
  MANUAL
}

enum InviteStatus {
  PENDING
  REJECTED
  ACCEPTED
}

model User {
  id                 String             @id @default(uuid())
  name               String?
  email              String             @unique
  hashedPassword     String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  communityUsers     CommunityUser[]
  participatedEvents EventParticipant[]
  likedEvents        EventLike[]
  communityInvites   CommunityInvite[]
  eventInvites       EventInvite[]
}

model Community {
  id           String            @id @default(cuid())
  name         String
  hashtag      String            @unique
  eventsLogged Event[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  users        CommunityUser[]
  invites      CommunityInvite[]
}

model CommunityUser {
  id   String        @id @default(uuid())
  role CommunityRole @default(MEMBER)

  User        User?      @relation(fields: [userId], references: [id])
  userId      String?
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model Event {
  id            Int                @id @default(autoincrement())
  name          String
  description   String?            @db.Text
  createdAt     DateTime           @default(now())
  startedAt     DateTime           @default(now())
  endAt         DateTime?
  scope         EventScope         @default(GLOBAL)
  location      String?
  status        EventStatus        @default(SCHEDULED)
  userId        String
  Community     Community?         @relation(fields: [communityId], references: [id])
  communityId   String?
  participants  EventParticipant[]
  likes         EventLike[]
  eventComments EventComment[]
  invites       EventInvite[]
}

model EventParticipant {
  id           Int            @id @default(autoincrement())
  role         EventRoles
  User         User?          @relation(fields: [userId], references: [id])
  userId       String?
  Event        Event?         @relation(fields: [eventId], references: [id])
  eventId      Int?
  EventComment EventComment[]
}

model EventLike {
  id      String  @id @default(cuid())
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId Int?
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model EventComment {
  id                 String           @id @default(cuid())
  comment            String
  parentId           String?
  createdAt          DateTime         @default(now())
  eventParticipant   EventParticipant @relation(fields: [eventParticipantId], references: [id])
  eventParticipantId Int
  Event              Event?           @relation(fields: [eventId], references: [id])
  eventId            Int?
}

model CommunityInvite {
  id          Int          @id @default(autoincrement())
  status      InviteStatus @default(PENDING)
  Community   Community?   @relation(fields: [communityId], references: [id])
  communityId String?
  User        User?        @relation(fields: [userId], references: [id])
  userId      String?
}

model EventInvite {
  id      Int          @id @default(autoincrement())
  status  InviteStatus @default(PENDING)
  User    User?        @relation(fields: [userId], references: [id])
  userId  String?
  Event   Event?       @relation(fields: [eventId], references: [id])
  eventId Int?
}
